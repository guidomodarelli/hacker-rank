import unittest
import sys
import os

# Add the parent directory to the path to import solution
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from solution import findVulnerabilityFactor, findVulnerabilityFactorOptimal, gcd, gcd_of_array


def calculate_vulnerability_factor_brute_force(key):
    """Calculate the actual vulnerability factor of an array by brute force"""
    n = len(key)
    max_length = 0

    # Check all possible subarrays
    for i in range(n):
        for j in range(i, n):
            subarray = key[i:j+1]
            if len(subarray) > 0:
                gcd_val = gcd_of_array(subarray)
                if gcd_val > 1:
                    max_length = max(max_length, len(subarray))

    return max_length


class TestVulnerabilityFactorDetailed(unittest.TestCase):
    """Detailed tests to understand the problem better"""

    def test_understand_vulnerability_factor(self):
        """Test to understand what vulnerability factor means"""
        # Test case 1: Array with all same elements
        key1 = [4, 4, 4, 4]
        vf1 = calculate_vulnerability_factor_brute_force(key1)
        print(f"Array {key1} has vulnerability factor: {vf1}")

        # Test case 2: Array with coprime elements
        key2 = [2, 3, 5, 7]
        vf2 = calculate_vulnerability_factor_brute_force(key2)
        print(f"Array {key2} has vulnerability factor: {vf2}")

        # Test case 3: Mixed array
        key3 = [2, 4, 3, 6]
        vf3 = calculate_vulnerability_factor_brute_force(key3)
        print(f"Array {key3} has vulnerability factor: {vf3}")

        # Test case 4: Single element
        key4 = [6]
        vf4 = calculate_vulnerability_factor_brute_force(key4)
        print(f"Array {key4} has vulnerability factor: {vf4}")

        # Test case 5: The sample case
        key5 = [5, 10, 20, 10, 15, 5]
        vf5 = calculate_vulnerability_factor_brute_force(key5)
        print(f"Array {key5} has vulnerability factor: {vf5}")

    def test_gcd_calculations(self):
        """Test GCD calculations on specific subarrays"""
        key = [5, 10, 20, 10, 15, 5]

        # Test some specific subarrays
        test_cases = [
            ([5], "single element"),
            ([5, 10], "first two"),
            ([5, 10, 20], "first three"),
            ([10, 20], "middle two"),
            ([10, 20, 10], "middle three"),
            ([20, 10, 15], "different three"),
            ([5, 10, 20, 10, 15, 5], "entire array")
        ]

        for subarray, description in test_cases:
            gcd_val = gcd_of_array(subarray)
            print(f"GCD of {subarray} ({description}): {gcd_val}")

    def test_simple_cases(self):
        """Test very simple cases to validate our understanding"""

        # Case 1: Two identical elements
        key = [6, 6]
        result1 = findVulnerabilityFactor(key, 0)
        result2 = findVulnerabilityFactorOptimal(key, 0)
        actual_vf = calculate_vulnerability_factor_brute_force(key)
        print(f"Two 6s: actual_vf={actual_vf}, algo1={result1}, algo2={result2}")

        # Case 2: Two coprime elements
        key = [2, 3]
        result1 = findVulnerabilityFactor(key, 0)
        result2 = findVulnerabilityFactorOptimal(key, 0)
        actual_vf = calculate_vulnerability_factor_brute_force(key)
        print(f"2,3: actual_vf={actual_vf}, algo1={result1}, algo2={result2}")

        # Case 3: Three elements, first two share factor
        key = [4, 6, 5]
        result1 = findVulnerabilityFactor(key, 0)
        result2 = findVulnerabilityFactorOptimal(key, 0)
        actual_vf = calculate_vulnerability_factor_brute_force(key)
        print(f"4,6,5: actual_vf={actual_vf}, algo1={result1}, algo2={result2}")

    def test_with_changes(self):
        """Test how changes affect the vulnerability factor"""

        # Start with a simple case
        key = [6, 6, 6, 6]  # All same, GCD=6, vulnerability factor should be 4
        print(f"Original array {key}:")
        actual_vf = calculate_vulnerability_factor_brute_force(key)
        print(f"  Actual vulnerability factor: {actual_vf}")

        # Test with different numbers of allowed changes
        for max_change in range(5):
            result1 = findVulnerabilityFactor(key, max_change)
            result2 = findVulnerabilityFactorOptimal(key, max_change)
            print(f"  With {max_change} changes: algo1={result1}, algo2={result2}")

    def test_sample_case_detailed(self):
        """Detailed analysis of the sample case"""
        key = [5, 10, 20, 10, 15, 5]
        maxChange = 2

        print(f"Sample case analysis:")
        print(f"Original array: {key}")

        actual_vf = calculate_vulnerability_factor_brute_force(key)
        print(f"Current vulnerability factor: {actual_vf}")

        result1 = findVulnerabilityFactor(key, maxChange)
        result2 = findVulnerabilityFactorOptimal(key, maxChange)

        print(f"With {maxChange} changes allowed:")
        print(f"  findVulnerabilityFactor result: {result1}")
        print(f"  findVulnerabilityFactorOptimal result: {result2}")

        # Let's also test what happens with different numbers of changes
        for changes in range(6):
            r1 = findVulnerabilityFactor(key, changes)
            r2 = findVulnerabilityFactorOptimal(key, changes)
            print(f"  {changes} changes: algo1={r1}, algo2={r2}")


if __name__ == '__main__':
    # Run the detailed tests
    print("Running Detailed Vulnerability Factor Analysis...")
    print("=" * 60)

    suite = unittest.TestSuite()
    suite.addTest(TestVulnerabilityFactorDetailed('test_understand_vulnerability_factor'))
    suite.addTest(TestVulnerabilityFactorDetailed('test_gcd_calculations'))
    suite.addTest(TestVulnerabilityFactorDetailed('test_simple_cases'))
    suite.addTest(TestVulnerabilityFactorDetailed('test_with_changes'))
    suite.addTest(TestVulnerabilityFactorDetailed('test_sample_case_detailed'))

    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite)
