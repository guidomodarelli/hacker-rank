#!/usr/bin/env python3
"""
Simple test runner for the Vulnerability Factor problem.
Run this script to test your solution with various test cases.
"""

import sys
import os

# Add the current directory to the path to import solution
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from solution import findVulnerabilityFactor, findVulnerabilityFactorOptimal
except ImportError:
    print("Error: Could not import solution.py")
    print("Make sure solution.py is in the same directory as this test file.")
    sys.exit(1)


def run_test_case(key, max_change, expected=None, description=""):
    """Run a single test case and display results"""
    print(f"\nTest: {description}")
    print(f"Input: key={key}, maxChange={max_change}")

    try:
        result1 = findVulnerabilityFactor(key, max_change)
        result2 = findVulnerabilityFactorOptimal(key, max_change)

        print(f"findVulnerabilityFactor result: {result1}")
        print(f"findVulnerabilityFactorOptimal result: {result2}")

        if expected is not None:
            if result1 == expected:
                print(f"‚úÖ Basic algorithm matches expected: {expected}")
            else:
                print(f"‚ùå Basic algorithm: expected {expected}, got {result1}")

            if result2 == expected:
                print(f"‚úÖ Optimal algorithm matches expected: {expected}")
            else:
                print(f"‚ùå Optimal algorithm: expected {expected}, got {result2}")
        else:
            print("‚ÑπÔ∏è  No expected result provided - just checking algorithms run")

        return result1, result2

    except Exception as e:
        print(f"‚ùå Error running test: {e}")
        return None, None


def main():
    """Run all test cases"""
    print("=" * 60)
    print("VULNERABILITY FACTOR TEST SUITE")
    print("=" * 60)

    test_cases = [
        # (key, maxChange, expected_result, description)
        ([5, 10, 20, 10, 15, 5], 2, None, "Sample case from problem statement"),
        ([2, 2, 4, 9, 6], 1, None, "Example case from README"),
        ([6, 6], 0, 2, "Two identical elements, no changes"),
        ([2, 3], 0, 1, "Two coprime elements"),
        ([4, 4, 4, 4], 1, None, "All same elements with 1 change"),
        ([2, 4, 8, 16], 2, None, "Powers of 2"),
        ([3, 6, 9, 12], 0, 4, "All multiples of 3"),
        ([7], 0, 1, "Single element"),
        ([2, 3, 5, 7, 11], 0, 1, "All primes (mostly coprime)"),
        ([10, 15, 20, 25], 3, None, "Multiples of 5 with changes"),
    ]

    passed = 0
    total = len(test_cases)

    for i, (key, max_change, expected, description) in enumerate(test_cases, 1):
        print(f"\n[{i}/{total}]", end=" ")
        result1, result2 = run_test_case(key, max_change, expected, description)

        if result1 is not None and result2 is not None:
            # Check if results are reasonable
            if (0 <= result1 <= len(key) and 0 <= result2 <= len(key)):
                if expected is None or result1 == expected or result2 == expected:
                    passed += 1
                    print("‚úÖ Test PASSED")
                else:
                    print("‚ùå Test FAILED")
            else:
                print("‚ùå Test FAILED (invalid results)")
        else:
            print("‚ùå Test FAILED (exception)")

    print("\n" + "=" * 60)
    print(f"SUMMARY: {passed}/{total} tests passed")

    if passed == total:
        print("üéâ All tests passed! Your solution looks good!")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check your implementation.")

    print("=" * 60)


if __name__ == "__main__":
    main()
